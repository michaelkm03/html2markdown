<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ac:confluence SYSTEM "../confluence-to-markdown-converter/dtd/confluence-all.dtd" [<!ENTITY clubs    "&#9827;"><!ENTITY nbsp   "&#160;"><!ENTITY ndash   "&#8211;"><!ENTITY mdash   "&#8212;">]><ac:confluence xmlns:ac="http://www.atlassian.com/schema/confluence/4/ac/" xmlns:ri="http://www.atlassian.com/schema/confluence/4/ri/" xmlns="http://www.atlassian.com/schema/confluence/4/"><p>Put testing how-to guides, presentations, and other info here.</p><h2><strong>General notes on testing in Android</strong></h2><p>For much of the history of the Android platform the only testing strategy available for local development was system testing - i.e.: running tests inside of a live Dalvik VM running on a device or emulator.&nbsp;</p><p>Thankfully, with the arrival of Android Studio and gradle build plugin v1.1 welcome changes finally ushered in Android unit testing support - &nbsp;i.e.: support and tooling that enables the development and execution of&nbsp;unit tests within the local IDE. In addition to these changes the build plugin also added the&nbsp;<code style="line-height: 1.42857;">mockableAndroidJar</code> task, which strips away the&nbsp;<code style="line-height: 1.42857;">final</code> modifier from Android components allowing them to be stubbed/proxied/mocked&nbsp;in your tests!</p><h3><strong>Testing flavors/strategies:</strong></h3><p>In a nutshell there are currently 3 core types of testing tools/environments available to the developer:&nbsp;</p><ul><li>(Dalvik VM, Device-based) Natively-instrumented testing frameworks such as Espresso or the legacy Android Instrumentation framework.<br /><br /></li><li>(JVM based) &quot;Shadow&quot; frameworks like Robolectric, which provide the speed benefit of running in a JVM while also providing non-device-based instrumentation/testing of Android applications.<br /><br /></li><li>(JVM based) Classic stand-alone unit/integration testing.<br /><br /></li></ul><p><strong>Trade-offs:</strong></p><ul style="list-style-type: square;"><li>Device-based tests provide full testing support and generally provide the highest confidence level due to the fact that they rely solely on native code, instrumentation, and runtime. However they also&nbsp;require the most overhead and are the slowest to run and develop/maintain.<br /><br /></li><li>Shadow frameworks provide huge gains in dev/run times, however they provide incomplete testing support and a lower confidence level than native testing environments.<br /><br /></li><li>Classic Unit testing environments provide the fastest dev/run times but they don't include any Android-specific testing support.</li></ul><h3>BEST PRACTICES:</h3><p>(See <a href="https://docs.google.com/a/getvictorious.com/presentation/d/1WDz7zK0oSvtFUGuX9gy-psQwdZ3URitZftejttfx-9E/edit?usp=sharing">Android Team Unit Testing Audit</a>&nbsp;for&nbsp;an overview of testing issues, best practices, gotchyas, and go-forward (as of 03/2016) recommendations)<a href="https://docs.google.com/a/getvictorious.com/presentation/d/1WDz7zK0oSvtFUGuX9gy-psQwdZ3URitZftejttfx-9E/edit?usp=sharing"></a></p><ul style="list-style-type: square;"><li>Use a &quot;tiered&quot; approach to testing. Always use the &quot;lightest&quot; solution available.&nbsp;<br />For example, if code and related testing goals can truly be isolated to business logic, outside of Android system and UI concerns,&nbsp;they should be written or re-written as &quot;vanilla&quot; JUnit tests instead of a Robolectric or Espresso tests.&nbsp;Doing this&nbsp;will provide gains in both dev and build time, and make the related tests more portable as well.<br /><br /></li><li>For Android-specific testing consider using native test coverage for application releases, while favoring &quot;Shadow&quot;-based test coverage for development.<br />&quot;Shadow&quot;-based testing should provide enough speed and ease of development to realistically support&nbsp;the option of employing a TDD dev approach (using Robolectric), while native testing will satisfy the confidence level required for release/delivery (using Espresso).<br />&nbsp;</li></ul><h2><strong>Definitions</strong></h2><p class="p1"><em>Collaborator</em>- any objects that interact with&nbsp; O.U.T. during test exec</p><p class="p1"><em>Instrumented unit tests<strong> -</strong></em><span>&nbsp;unit tests that run on physical devices and emulators, instead of the Java Virtual Machine (JVM) on your local machine.</span></p><p class="p1"><em>mock</em> - a object where most methods will have null/false/zero</p><p class="p1"><em>OUT</em>- object under test</p><p class="p1"><em>stub</em>- a mock object where some methods will return useful data</p><p class="p1">&nbsp;</p><h1 class="p1">Tools</h1><h2 class="p1"><strong style="font-size: 20.0px;line-height: 1.5;">Mockito</strong> - Mock Objects, stubbing, argumentCaptors</h2><p>Slides by Bret&nbsp;<a href="https://docs.google.com/presentation/d/1CqAxLIIoHdGwd1WFUCXcQRtm1GKexLQ9RZIVCJT9_D8/" style="line-height: 1.42857;">https://docs.google.com/presentation/d/1CqAxLIIoHdGwd1WFUCXcQRtm1GKexLQ9RZIVCJT9_D8/</a></p><h2 class="p1"><strong>Espresso</strong>&nbsp;- UI Testing</h2><p>Slides by Edward&nbsp;<a href="https://docs.google.com/presentation/d/1EkvcYz8lU8u-uAnO2A-o_-FQXro2aK-EA6Ltt-cAJBI/">https://docs.google.com/presentation/d/1EkvcYz8lU8u-uAnO2A-o_-FQXro2aK-EA6Ltt-cAJBI/</a></p><p>Cheat sheet &nbsp;<a href="https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/">https://google.github.io/android-testing-support-library/docs/espresso/cheatsheet/</a></p><p><strong>Testing Environment:</strong></p><ul><li>Androideka / staging</li></ul><p><strong>How to run tests:</strong></p><ul><li>From terminal:&nbsp;<span class="s1">./gradlew cAT or .</span>/gradlew&nbsp;connectedAndroid</li></ul><p class="p1"><strong>How to run specific test:</strong></p><ul><li class="p1">From Android Studio: Click the test file -&gt; Run -&gt; Run -&gt; select test file</li><li class="p1">From Terminal:&nbsp;<span style="line-height: 1.42857;">./gradlew -Pandroid.testInstrumentationRunnerArguments.class=your.test.file.package.TestClass connectedAndroid</span></li></ul><h2><strong style="font-size: 20.0px;line-height: 1.5;">Robolectric - </strong>JVM-based, &quot;shadowed&quot; Android system/UI testing</h2><p>Cheat sheet (somewhat dated but works)&nbsp;<a href="https://github.com/danialgoodwin/dev/blob/master/android/testing/robolectric-cheat-sheet.md">https://github.com/danialgoodwin/dev/blob/master/android/testing/robolectric-cheat-sheet.md</a></p><p>Set up:</p><ol><li>gradle provides separate classpath configuration for tests that use native Android Instrumentation (e.g.: native Android framework and Espresso) vs. standalone tests that run in the JVM (respectively <code>androidTestCompile</code> and &nbsp;<code>testCompile</code>). Specify the necessary dependencies with&nbsp;<code>testCompile</code> declarations:</li></ol><pre><span style="color: rgb(128,128,128);">// Robolectric<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">'junit:junit:4.12'<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">'org.mockito:mockito-core:1.10.19'<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">'org.hamcrest:hamcrest-core:1.1'<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">'org.hamcrest:hamcrest-library:1.1'<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">'org.hamcrest:hamcrest-integration:1.1'<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">&quot;org.robolectric:robolectric:3.0&quot;<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">&quot;org.robolectric:shadows-multidex:3.0&quot;<br /></span><span style="color: rgb(0,165,48);">testCompile </span><span style="color: rgb(106,135,89);">&quot;org.robolectric:shadows-support-v4:3.0&quot;</span></pre><p>&nbsp; &nbsp; 2. Place your test class under src/test/java</p><p>&nbsp; &nbsp; 3. Important: when writing or running Robolectric tests (or any other standalone tests that live under src/test) you MUST use the Android Studio &quot;Build Variants&quot; widget and toggle the &quot;Test Artifact&quot; setting to &quot;Unit Tests&quot;</p><p>&nbsp; &nbsp; 4. Have your test class extend RoboConf and annotate the class declaration with the robolectric runner:</p><pre><span style="color: rgb(187,181,41);">@RunWith</span>(RobolectricGradleTestRunner.<span style="color: rgb(176,114,232);">class</span>)<br /><span style="color: rgb(176,114,232);">public class </span>ModelTest <span style="color: rgb(176,114,232);">extends </span>RoboConf {</pre><p>&nbsp; &nbsp;5. Use the following guides to help you get started writing tests using the Robolectric framework and APIs, and/or check out existing Robolectric tests (as they continue to develop/appear in our code base)</p><p><a href="http://robolectric.org/">http://robolectric.org/</a></p><p><a href="http://robolectric.org/getting-started/">http://robolectric.org/getting-started/</a></p><p><a href="http://robolectric.org/writing-a-test/">http://robolectric.org/writing-a-test/</a></p><p><a href="http://robolectric.org/javadoc/3.0/index.html">http://robolectric.org/javadoc/3.0/index.html</a></p><p>&nbsp;</p><h2>TROUBLESHOOTING</h2><p><span style="color: rgb(44,45,48);">java.lang.RuntimeException: java.lang.RuntimeException: build/intermediates/bundles/debug/AndroidManifest.xml not found or not a file; it should point to your project's AndroidManifest.xml</span><span class="para_break" style="color: rgb(44,45,48);"><em class="copy_only"><br /></em></span><a href="https://github.com/robolectric/robolectric/issues/1648">https://github.com/robolectric/robolectric/issues/1648<br /></a><span class="para_break" style="color: rgb(44,45,48);">Open Edit Configuration</span></p><p><ac:image ac:height="250"><ri:attachment ri:filename="Screen Shot 2016-01-22 at 11.19.13 AM.png" /></ac:image></p><div class="special_formatting_quote"><div class="content dynamic_content_max_width">Set DEFAULT Working Directory to $MODULE_DIR$ &nbsp;(you might also need to do so for existing tests)</div></div><p><ac:image ac:height="250"><ri:attachment ri:filename="Screen Shot 2016-01-22 at 2.56.07 PM.png" /></ac:image></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p></ac:confluence>